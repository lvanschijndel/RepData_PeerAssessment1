q()
q()
unzip("./activity.zip",exdir=".")
data <- read.table(file = "activity.csv", header = TRUE, sep = ",", colClasses = c("numeric", "character", "numeric"))
data$date <- as.Date(data$date, "%Y-%m-%d")
dailydata <- aggregate(steps ~ date, data = data, FUN = sum, na.rm = TRUE)
hist(dailydata$steps)
mean(dailydata$steps)
median(dailydata$steps)
intervaldata <- aggregate(steps ~ interval, data = data, FUN = mean, na.rm = TRUE)
with(intervaldata, plot(steps~interval, type = "l"))mean(dailydata$steps)
unzip("./activity.zip",exdir=".")
data <- read.table(file = "activity.csv", header = TRUE, sep = ",", colClasses = c("numeric", "character", "numeric"))
data$date <- as.Date(data$date, "%Y-%m-%d")
dailydata <- aggregate(steps ~ date, data = data, FUN = sum, na.rm = TRUE)
hist(dailydata$steps)
mean(dailydata$steps)
median(dailydata$steps)
intervaldata <- aggregate(steps ~ interval, data = data, FUN = mean, na.rm = TRUE)
with(intervaldata, plot(steps~interval, type = "l"))
mean(dailydata$steps)
sum(is.na(data$steps))
sum(is.na(data$steps))/length(data$steps)
imputeddata <- data
for(i in seq_along(nrow(imputeddata))) {
if(is.na(imputeddata$steps[i])) {
imputeddata[i] = intervaldata$steps[intervaldata$interval == imputeddata$interval[i]]
}
}
imputeddata
unzip("./activity.zip",exdir=".")
data <- read.table(file = "activity.csv", header = TRUE, sep = ",", colClasses = c("numeric", "character", "numeric"))
data$date <- as.Date(data$date, "%Y-%m-%d")
dailydata <- aggregate(steps ~ date, data = data, FUN = sum, na.rm = TRUE)
hist(dailydata$steps)
mean(dailydata$steps)
median(dailydata$steps)
intervaldata <- aggregate(steps ~ interval, data = data, FUN = mean, na.rm = TRUE)
with(intervaldata, plot(steps~interval, type = "l"))
mean(dailydata$steps)
sum(is.na(data$steps))
sum(is.na(data$steps))/length(data$steps)
imputeddata <- data
for(i in seq_along(nrow(imputeddata))) {
if(is.na(imputeddata$steps[i])) {
imputeddata$steps[i] = intervaldata$steps[intervaldata$interval == imputeddata$interval[i]]
}
}
imputeddata
seq_along(nrow(imputeddata)
)
imputeddata <- data
nrow(imputeddata)
?seq_along
seq_along(17568)
seq_along(4)
for(i in 1:nrow(imputeddata)) {
if(is.na(imputeddata$steps[i])) {
imputeddata$steps[i] = intervaldata$steps[intervaldata$interval == imputeddata$interval[i]]
}
}
imputeddata
head(imputeddata)
head(intervaldata)
sum(is.na(data$steps))
sum(is.na(data$steps))/length(data$steps)
imputeddata <- data
for(i in 1:nrow(imputeddata)) {
if(is.na(imputeddata$steps[i])) {
imputeddata$steps[i] = intervaldata$steps[intervaldata$interval == imputeddata$interval[i]]
}
}
imputeddailydata <- aggregate(steps ~ date, data = imputeddata, FUN = sum, na.rm = TRUE)
hist(dailydata$steps, main = "Histogram of average daily steps - missing values imputed")
mean(imputeddailydata)
median(imputeddailydata)
mean(imputeddailydata$steps)
median(imputeddailydata$steps)
unzip("./activity.zip",exdir=".")
data <- read.table(file = "activity.csv", header = TRUE, sep = ",", colClasses = c("numeric", "character", "numeric"))
data$date <- as.Date(data$date, "%Y-%m-%d")
dailydata <- aggregate(steps ~ date, data = data, FUN = sum, na.rm = TRUE)
hist(dailydata$steps)
mean(dailydata$steps)
median(dailydata$steps)
intervaldata <- aggregate(steps ~ interval, data = data, FUN = mean, na.rm = TRUE)
with(intervaldata, plot(steps~interval, type = "l"))
mean(dailydata$steps)
sum(is.na(data$steps))
sum(is.na(data$steps))/length(data$steps)
imputeddata <- data
for(i in 1:nrow(imputeddata)) {
if(is.na(imputeddata$steps[i])) {
imputeddata$steps[i] = intervaldata$steps[intervaldata$interval == imputeddata$interval[i]]
}
}
imputeddailydata <- aggregate(steps ~ date, data = imputeddata, FUN = sum, na.rm = TRUE)
hist(imputeddailydata$steps, main = "Histogram of average daily steps - missing values imputed")
mean(imputeddailydata$steps)
median(imputeddailydata$steps)
naintervals <- data[is.na(data$steps),]
naintervals
unique(naintervals$date)
countnaperday <- aggregate(steps ~ date, naintervals, FUN = count)
count
?aggregate
countnaperday <- aggregate(steps ~ date, naintervals, FUN = length)
naintervals
countnaperday <- aggregate(steps ~ date, naintervals, FUN = length)
?length
?sum
countnaperday <- aggregate(steps ~ date, naintervals, FUN = tabulate, na.rm = FALSE)
countnaperday <- aggregate(interval ~ date, naintervals, FUN = tabulate, na.rm = FALSE)
countnaperday <- aggregate(interval ~ date, naintervals, FUN = tabulate)
countnaperday
countnaperday <- aggregate(interval ~ date, naintervals, FUN = length)
countnaperday
= 24*12
24*12
max(dailydata$steps)
dailymaxinterval <- dailydata$interval[dailydata$steps == maxdailysteps
]
maxdailysteps <- max(dailydata$steps)
dailymaxinterval <- dailydata$interval[dailydata$steps == maxdailysteps]
dailymaxinterval
maxdailysteps
dailydata$steps == maxdailysteps
dailydata$interval
dailydata
maxdailysteps <- max(intervaldata$steps)
dailymaxinterval <- intervaldata$interval[intervaldata$steps == maxdailysteps]
dailymaxinterval
?weekdays
data$weekday[weekday(data$date) == "Saturday" | weekday(data$date) == "Sunday"] <- "weekend"
data$weekday[weekdays(data$date) == "Saturday" | weekdays(data$date) == "Sunday"] <- "weekend"
data
summary(daat)
summary(data)
for(i in 1:nrow(data)) {
if(weekdays(data$date[i]) == "Saturday" | weekdays(data$date[i]) == "Sunday") {
data$weekday[i] = "weekend"
} else {data$weekday[i] = "weekday"}
}
}
{}
weekdays(data$date[1])
data$weekday[weekdays(data$date) == "Saturday" | weekdays(data$date) == "Sunday"] <- "weekend"
data$weekday[weekdays(data$date) == "Monday" | weekdays(data$date) == "Tuesday"] <- "weekday"
weekdays(data$date[1])
data$weekday[1]
data$weekday[weekdays(data$date) == "Monday" | weekdays(data$date) == "Tuesday"|
weekdays(data$date) == "Wednesday" | weekdays(data$date) == "Thursday" |
weekdays(data$date) == "Friday" ] <- "weekday"
unique(data$weekdays)
unique(data$weekday
)
sum(is.na(data$weekday))
unzip("./activity.zip",exdir=".")
data <- read.table(file = "activity.csv", header = TRUE, sep = ",", colClasses = c("numeric", "character", "numeric"))
data$date <- as.Date(data$date, "%Y-%m-%d")
dailydata <- aggregate(steps ~ date, data = data, FUN = sum, na.rm = TRUE)
hist(dailydata$steps)
dailystepsmean <- mean(dailydata$steps)
dailystepsmean
dailystepsmedian <- median(dailydata$steps)
dailystepsmedian
intervaldata <- aggregate(steps ~ interval, data = data, FUN = mean, na.rm = TRUE)
with(intervaldata, plot(steps~interval, type = "l"))
maxdailysteps <- max(intervaldata$steps)
dailymaxinterval <- intervaldata$interval[intervaldata$steps == maxdailysteps]
NAcount <- sum(is.na(data$steps))
NAfrac <- sum(is.na(data$steps))/length(data$steps)
naintervals <- data[is.na(data$steps),]
countnaperday <- aggregate(interval ~ date, naintervals, FUN = length)
countnaperday
imputeddata <- data
for(i in 1:nrow(imputeddata)) {
if(is.na(imputeddata$steps[i])) {
imputeddata$steps[i] = intervaldata$steps[intervaldata$interval == imputeddata$interval[i]]
}
}
imputeddailydata <- aggregate(steps ~ date, data = imputeddata, FUN = sum, na.rm = TRUE)
hist(imputeddailydata$steps, main = "Histogram of average daily steps - missing values imputed")
imputeddailystepsmean <- mean(imputeddailydata$steps)
imputeddailystepsmedian <- median(imputeddailydata$steps)
data$weekday[weekdays(data$date) == "Saturday" | weekdays(data$date) == "Sunday"] <- "weekend"
data$weekday[weekdays(data$date) == "Monday" | weekdays(data$date) == "Tuesday"|
weekdays(data$date) == "Wednesday" | weekdays(data$date) == "Thursday" |
weekdays(data$date) == "Friday" ] <- "weekday"
head(data)
tail(data)
weekdaydata <- aggregate(steps ~ weekday, data = data, FUN = sum, na.rm = TRUE)
weekdaydata <- aggregate(steps ~ interval + weekday, data = data, FUN = sum, na.rm = TRUE)
head(weekdaydata)
tail(weekdaydata)
library(lattice)
xyplot(steps ~ interval | weekday, data = weekdaydata)
xyplot(steps ~ interval | weekday, data = weekdaydata, type = "l")
xyplot(steps ~ interval | weekday, data = weekdaydata, type = "l", layout = c(1,2))
xyplot(steps ~ interval | weekday, data = weekdaydata, type = "l", layout = c(1,2), ylab = "number of steps")
knittohtml(PA1_template.Rmd)
rm(list=ls(all=TRUE))
library(knitr)
knittohtml(PA1_template.Rmd)
knit2html(PA1_template.Rmd)
setwd("~/Luc/MOOC/John Hopkins Data Science/Repositories/RepData_PeerAssessment1")
knit2html(PA1_template.Rmd)
knit2html("PA1_template.Rmd")
library(rmarkdown)
render("PA1_template.Rmd")
